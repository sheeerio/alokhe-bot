/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as core from "../../../../core";
import * as fs from "fs";
import * as OpenAI from "../../..";
export declare namespace Audio {
    interface Options {
        token: core.Supplier<core.BearerToken>;
        organization?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
}
export declare class Audio {
    protected readonly options: Audio.Options;
    constructor(options: Audio.Options);
    /**
     * Transcribes audio into the input language.
     * @throws {OpenAI.UnauthorizedError}
     * @throws {OpenAI.RateLimitError}
     * @throws {OpenAI.InternalServerError}
     */
    transcribe(file: File | fs.ReadStream, request: OpenAI.CreateTranscriptionRequest, opts?: {
        onUploadProgress: (event: ProgressEvent) => void;
    }): Promise<OpenAI.CreateTranscriptionResponse>;
    /**
     * Translates audio into into English.
     * @throws {OpenAI.UnauthorizedError}
     * @throws {OpenAI.RateLimitError}
     * @throws {OpenAI.InternalServerError}
     */
    translate(file: File | fs.ReadStream, request: OpenAI.CreateTranslationRequest, opts?: {
        onUploadProgress: (event: ProgressEvent) => void;
    }): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
