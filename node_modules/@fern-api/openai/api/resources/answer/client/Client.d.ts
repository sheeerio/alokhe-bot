/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as OpenAI from "../../..";
export declare namespace Answer {
    interface Options {
        token: core.Supplier<core.BearerToken>;
        organization?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
}
export declare class Answer {
    protected readonly options: Answer.Options;
    constructor(options: Answer.Options);
    /**
     * Answers the specified question using the provided documents and examples. The endpoint first [searches](https://platform.openai.com/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](https://platform.openai.com/docs/api-reference/completions).
     *
     * @throws {OpenAI.UnauthorizedError}
     * @throws {OpenAI.RateLimitError}
     * @throws {OpenAI.InternalServerError}
     */
    create(request: OpenAI.CreateAnswerRequest): Promise<OpenAI.CreateAnswerResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
