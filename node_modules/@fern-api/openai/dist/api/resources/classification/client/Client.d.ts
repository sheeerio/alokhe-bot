/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as OpenAI from "../../..";
export declare namespace Classification {
    interface Options {
        token: core.Supplier<core.BearerToken>;
        organization?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
}
export declare class Classification {
    protected readonly options: Classification.Options;
    constructor(options: Classification.Options);
    /**
     * Classifies the specified `query` using provided examples. The endpoint first [searches](https://platform.openai.com/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](https://platform.openai.com/docs/api-reference/completions) endpoint. Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.
     *
     * @throws {OpenAI.UnauthorizedError}
     * @throws {OpenAI.RateLimitError}
     * @throws {OpenAI.InternalServerError}
     */
    create(request: OpenAI.CreateClassificationRequest): Promise<OpenAI.CreateClassificationResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
